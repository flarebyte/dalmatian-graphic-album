// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ColorRGBA struct {
	_tab flatbuffers.Table
}

func GetRootAsColorRGBA(buf []byte, offset flatbuffers.UOffsetT) *ColorRGBA {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ColorRGBA{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ColorRGBA) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColorRGBA) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ColorRGBA) R() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColorRGBA) MutateR(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *ColorRGBA) G() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColorRGBA) MutateG(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *ColorRGBA) B() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColorRGBA) MutateB(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *ColorRGBA) A() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColorRGBA) MutateA(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func ColorRGBAStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ColorRGBAAddR(builder *flatbuffers.Builder, r uint16) {
	builder.PrependUint16Slot(0, r, 0)
}
func ColorRGBAAddG(builder *flatbuffers.Builder, g uint16) {
	builder.PrependUint16Slot(1, g, 0)
}
func ColorRGBAAddB(builder *flatbuffers.Builder, b uint16) {
	builder.PrependUint16Slot(2, b, 0)
}
func ColorRGBAAddA(builder *flatbuffers.Builder, a uint16) {
	builder.PrependUint16Slot(3, a, 0)
}
func ColorRGBAEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
