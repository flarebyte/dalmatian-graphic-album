// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EllipticalArc struct {
	_tab flatbuffers.Table
}

func GetRootAsEllipticalArc(buf []byte, offset flatbuffers.UOffsetT) *EllipticalArc {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EllipticalArc{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *EllipticalArc) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EllipticalArc) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EllipticalArc) Rx() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EllipticalArc) MutateRx(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *EllipticalArc) Ry() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EllipticalArc) MutateRy(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *EllipticalArc) Rotate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *EllipticalArc) MutateRotate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *EllipticalArc) ArcFlag() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EllipticalArc) MutateArcFlag(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *EllipticalArc) X() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EllipticalArc) MutateX(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *EllipticalArc) Y() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EllipticalArc) MutateY(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func EllipticalArcStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EllipticalArcAddRx(builder *flatbuffers.Builder, rx uint32) {
	builder.PrependUint32Slot(0, rx, 0)
}
func EllipticalArcAddRy(builder *flatbuffers.Builder, ry uint32) {
	builder.PrependUint32Slot(1, ry, 0)
}
func EllipticalArcAddRotate(builder *flatbuffers.Builder, rotate float32) {
	builder.PrependFloat32Slot(2, rotate, 0.0)
}
func EllipticalArcAddArcFlag(builder *flatbuffers.Builder, arcFlag byte) {
	builder.PrependByteSlot(3, arcFlag, 0)
}
func EllipticalArcAddX(builder *flatbuffers.Builder, x uint32) {
	builder.PrependUint32Slot(4, x, 0)
}
func EllipticalArcAddY(builder *flatbuffers.Builder, y uint32) {
	builder.PrependUint32Slot(5, y, 0)
}
func EllipticalArcEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
