// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Fraction struct {
	_tab flatbuffers.Table
}

func GetRootAsFraction(buf []byte, offset flatbuffers.UOffsetT) *Fraction {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Fraction{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Fraction) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Fraction) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Fraction) Numerator() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Fraction) MutateNumerator(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Fraction) Denominator() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Fraction) MutateDenominator(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func FractionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FractionAddNumerator(builder *flatbuffers.Builder, numerator uint32) {
	builder.PrependUint32Slot(0, numerator, 0)
}
func FractionAddDenominator(builder *flatbuffers.Builder, denominator uint32) {
	builder.PrependUint32Slot(1, denominator, 0)
}
func FractionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
