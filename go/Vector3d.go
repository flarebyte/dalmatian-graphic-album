// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Vector3d struct {
	_tab flatbuffers.Table
}

func GetRootAsVector3d(buf []byte, offset flatbuffers.UOffsetT) *Vector3d {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Vector3d{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Vector3d) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vector3d) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Vector3d) Value(obj *Vec3d) *Vec3d {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vec3d)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func Vector3dStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func Vector3dAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(value), 0)
}
func Vector3dEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
