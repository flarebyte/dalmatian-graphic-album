namespace Dalmatian;
file_extension "dln";

attribute "priority";

struct IRIMeta {
    id:short;
    prefix: string;
    suffix: string;
    mediaType: string;
    language: string;
}

struct IRI {
    locator:string;
    meta:short;
}

struct Dimension2D {
    width: uint32;
    height: uint32;
}

struct Dimension360 {
    width: uint32;
    height: uint32;
}

struct StringInfo {
    info: string;
    iri: IRI;
}
struct Relation {
    predicate: IRI;
    resource: IRI;
}

// https://en.wikipedia.org/wiki/Dublin_Core

table Metadata {
    identifier: StringInfo;
    version: StringInfo;
    language: string;
    dimension: Dimension2D;
    dimension360: Dimension360;
    dpi: uint16;

    // https://en.wikipedia.org/wiki/Dublin_Core

    title: StringInfo;
    description: StringInfo;
    creator: [StringInfo];
    contributor: [StringInfo];
    publisher: [StringInfo];
    
    // Rights
    license: StringInfo;
    rights: StringInfo;
    attribution: StringInfo; //cc

    // Time: https://en.wikipedia.org/wiki/ISO_8601
    created: string;
    modified: string;

    // Linking
    related: [Relation];
 
}

table Color {
    name: StringInfo;
    colorSpace: StringInfo;
    value: string;
}

struct Tile255x255 {
    rle: [uint32]; // Run length encoding
}

enum: byte Truth {Yes, No}

struct Processor {
    name: StringInfo;
    version: StringInfo;
}

struct Script {
    processor: Processor;
    content: string;
}

struct Effect {
    before: Script;
    main: Script;
    after: Script;
    optional: Truth;
}

struct MoveTo {
    x: uint32;
    y: uint32;
}
struct LineTo {
    x: uint32;
    y: uint32;
}

struct Horizontal {
    x: uint32;
}

struct Vertical {
    y: uint32;
}

struct CubicCurve {
    x1: uint32;
    y1: uint32;
    x2: uint32;
    y2: uint32;
    x: uint32;
    y: uint32;
}

struct SmoothCubicCurve {
    x2: uint32;
    y2: uint32;
    x: uint32;
    y: uint32;
}

struct QuadraticCurve {
    x1: uint32;
    y1: uint32;
    x: uint32;
    y: uint32;
}

struct SmoothQuadraticCurve {
    x: uint32;
    y: uint32;
}

union Draw {MoveTo, LineTo, Horizontal, Vertical, CubicCurve, SmoothCubicCurve, QuadraticCurve, SmoothQuadraticCurve}

table Shape {
    identifier: StringInfo;
    title: StringInfo;
    description: StringInfo;
    related: [Relation];    
    drawing: [Draw];
    effect: [Effect];
}


struct RunLengthEncoding255x255 {
    dimension: Dimension2D;
    tiles: [Tile255x255];
}

struct RawLayerMeta {
    tileDimension: Dimension2D;
    layerDimension: Dimension2D; // usually in tile block
    flags: uint32;
    encoding: StringInfo;
}

struct RawLayer64 {
    meta: RawLayerMeta;
    data: [uint64];
}
struct RawLayer32 {
    meta: RawLayerMeta;
    data: [uint32];
}
struct RawLayer16 {
    meta: RawLayerMeta;
    data: [uint16];
}
struct RawLayer8 {
    meta: RawLayerMeta;
    data: [uint8];
}
struct VectorialLayer {
    shapes: [Shape];
}
union LayerData {VectorialLayer, RawLayer8, RawLayer16, RawLayer32, RawLayer64}

table Layer {
    id: uint32;
    data: LayerData;
    format: StringInfo;
    color0: [Color]; // each should represent the same color in different color space
    color1: [Color];
    description: StringInfo;
    effects: [Effect];
    related: [Relation]; //tags
}


table MonoColorChunk {
    id: uint32;
    data: RunLengthEncoding255x255;
}

table Image {
  metadata:Metadata;
  layers: [Layer];
  effecs: [Effect]
}

root_type Image;