// tslint:disable: member-access member-ordering max-classes-per-file prefer-const no-class variable-name no-expression-statement no-object-mutation no-this readonly-keyword no-var-keyword typedef

import {flatbuffers} from 'flatbuffers'
// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @enum
 */
export enum ArcFlag{
  LargeArcA= 0,
  SmallArcA= 1,
  LargeArcB= 2,
  SmallArcB= 3
};

/**
 * @enum
 */
export enum Draw{
  NONE= 0,
  MoveTo= 1,
  LineTo= 2,
  Horizontal= 3,
  Vertical= 4,
  CubicCurve= 5,
  SmoothCubicCurve= 6,
  QuadraticCurve= 7,
  SmoothQuadraticCurve= 8,
  EllipticalArc= 9
};

/**
 * @constructor
 */
export class MoveTo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns MoveTo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):MoveTo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createMoveTo(builder:flatbuffers.Builder, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class LineTo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LineTo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):LineTo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createLineTo(builder:flatbuffers.Builder, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class Horizontal {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Horizontal
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Horizontal {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @returns flatbuffers.Offset
 */
static createHorizontal(builder:flatbuffers.Builder, x: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class Vertical {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Vertical
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Vertical {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number y
 * @returns flatbuffers.Offset
 */
static createVertical(builder:flatbuffers.Builder, y: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(y);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class CubicCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CubicCurve
 */
__init(i:number, bb:flatbuffers.ByteBuffer):CubicCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x1():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
y1():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @returns number
 */
x2():number {
  return this.bb!.readUint32(this.bb_pos + 8);
};

/**
 * @returns number
 */
y2():number {
  return this.bb!.readUint32(this.bb_pos + 12);
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos + 16);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 20);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x1
 * @param number y1
 * @param number x2
 * @param number y2
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createCubicCurve(builder:flatbuffers.Builder, x1: number, y1: number, x2: number, y2: number, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.writeInt32(y);
  builder.writeInt32(x);
  builder.writeInt32(y2);
  builder.writeInt32(x2);
  builder.writeInt32(y1);
  builder.writeInt32(x1);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class SmoothCubicCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns SmoothCubicCurve
 */
__init(i:number, bb:flatbuffers.ByteBuffer):SmoothCubicCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x2():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
y2():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos + 8);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x2
 * @param number y2
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createSmoothCubicCurve(builder:flatbuffers.Builder, x2: number, y2: number, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeInt32(y);
  builder.writeInt32(x);
  builder.writeInt32(y2);
  builder.writeInt32(x2);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class QuadraticCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns QuadraticCurve
 */
__init(i:number, bb:flatbuffers.ByteBuffer):QuadraticCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x1():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
y1():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos + 8);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x1
 * @param number y1
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createQuadraticCurve(builder:flatbuffers.Builder, x1: number, y1: number, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeInt32(y);
  builder.writeInt32(x);
  builder.writeInt32(y1);
  builder.writeInt32(x1);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class SmoothQuadraticCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns SmoothQuadraticCurve
 */
__init(i:number, bb:flatbuffers.ByteBuffer):SmoothQuadraticCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createSmoothQuadraticCurve(builder:flatbuffers.Builder, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class EllipticalArc {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EllipticalArc
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EllipticalArc {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
rx():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
ry():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @returns number
 */
rotate():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @returns ArcFlag
 */
arcFlag():ArcFlag {
  return /**  */ (this.bb!.readInt8(this.bb_pos + 12));
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readUint32(this.bb_pos + 16);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readUint32(this.bb_pos + 20);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rx
 * @param number ry
 * @param number rotate
 * @param ArcFlag arcFlag
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createEllipticalArc(builder:flatbuffers.Builder, rx: number, ry: number, rotate: number, arcFlag: ArcFlag, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.writeInt32(y);
  builder.writeInt32(x);
  builder.pad(3);
  builder.writeInt8(arcFlag);
  builder.writeFloat32(rotate);
  builder.writeInt32(ry);
  builder.writeInt32(rx);
  return builder.offset();
};

}
