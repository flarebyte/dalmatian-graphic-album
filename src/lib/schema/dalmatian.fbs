namespace Dalmatian;
file_identifier "DALN";
file_extension "daln";

attribute "priority";

// structures

struct Dimension2D {
    width: uint32;
    height: uint32;
}

struct MoveTo {
    x: uint32;
    y: uint32;
}

struct LineTo {
    x: uint32;
    y: uint32;
}

struct Horizontal {
    x: uint32;
}

struct Vertical {
    y: uint32;
}

struct CubicCurve {
    x1: uint32;
    y1: uint32;
    x2: uint32;
    y2: uint32;
    x: uint32;
    y: uint32;
}

struct SmoothCubicCurve {
    x2: uint32;
    y2: uint32;
    x: uint32;
    y: uint32;
}

struct QuadraticCurve {
    x1: uint32;
    y1: uint32;
    x: uint32;
    y: uint32;
}

struct SmoothQuadraticCurve {
    x: uint32;
    y: uint32;
}

// tables

table ArrayOfU64 {
    data: [uint64];
}
table ArrayOfU32 {
    data: [uint32];
}
table ArrayOfU16 {
    data: [uint16];
}
table ArrayOfU8 {
    data: [uint8];
}

table IRIMeta {
    id:byte (key);
    prefix: string;
    suffix: string;
    mediaType: string;
    language: string;
}

table IRI {
    path: string;
    metaId: byte;
}

table Hyperlink {
    text: string;
    iri: IRI;
}
table Relation {
    predicate: IRI;
    resource: IRI;
}

// https://en.wikipedia.org/wiki/Dublin_Core

table Metadata {
    identifier: IRI;
    version: IRI;
    language: string;
    dimension: Dimension2D;
    dpi: uint16;

    // https://en.wikipedia.org/wiki/Dublin_Core

    title: Hyperlink;
    description: Hyperlink;
    creator: [Hyperlink];
    contributor: [Hyperlink];
    publisher: [Hyperlink];
    
    // Rights
    license: Hyperlink;
    rights: Hyperlink;
    attribution: Hyperlink; //cc

    // Time: https://en.wikipedia.org/wiki/ISO_8601
    created: string;
    modified: string;

    // Linking
    related: [Relation];
 
}

table Color {
    id:byte (key);
    name: Hyperlink;
    colorSpace: Hyperlink;
    value: string;
}

table Processor {
    id:byte (key);
    name: Hyperlink; // script language, json
    version: Hyperlink;
}

table Script {
    id: uint16 (key);
    processorId: byte;
    code: string;
}

table Effect {
    id: uint16 (key);
    beforeScriptId: uint16;
    mainScriptId: uint16;
    afterScriptId: uint16;
    related: [Relation];
}

union Draw {MoveTo, LineTo, Horizontal, Vertical, CubicCurve, SmoothCubicCurve, QuadraticCurve, SmoothQuadraticCurve}

table Shape {
    identifier: IRI;
    title: Hyperlink;
    description: Hyperlink;
    related: [Relation];    
    drawing: [Draw];
    effect: [Effect];
}

table RawLayerMeta {
    tileDimension: Dimension2D;
    layerDimension: Dimension2D; // usually unit will be tiles
    flags: uint32;
    encoding: Hyperlink;
}

table RawLayer64 {
    meta: RawLayerMeta;
    data: [uint64];
}
table RawLayer32 {
    meta: RawLayerMeta;
    data: [uint32];
}
table RawLayer16 {
    meta: RawLayerMeta;
    data: [uint16];
}
table RawLayer8 {
    meta: RawLayerMeta;
    data: [uint8];
}
table VectorialLayer {
    shapes: [Shape];
}

table Raw2DLayer64 {
    meta: RawLayerMeta;
    data: [ArrayOfU64];
}

table Raw2DLayer32 {
    meta: RawLayerMeta;
    data: [ArrayOfU32];
}

table Raw2DLayer16 {
    meta: RawLayerMeta;
    data: [ArrayOfU16];
}

table Raw2DLayer8 {
    meta: RawLayerMeta;
    data: [ArrayOfU8];
}

union LayerData {VectorialLayer, RawLayer8, RawLayer16, RawLayer32, RawLayer64, Raw2DLayer8, Raw2DLayer16, Raw2DLayer32, Raw2DLayer64}

table Layer {
    id: uint16 (key);
    data: LayerData (required);
    colorId: [byte]; //usually 2
    format: Hyperlink;
    description: Hyperlink;
    effect: [Effect];
    related: [Relation]; //tags
}

table Publishing {
    id: byte (key);
    medium: Hyperlink; // The material or physical carrier of the resource. ex: Paper, Screen, Storage, 3D glasses
    format: Hyperlink; // The file format, physical medium, or dimensions of the resource. Ex: A4, jpeg
    style: [IRI]; // ex: black and white, Manga
    colorId: [byte];
    dimension: Dimension2D;
    dpi: uint16;
    related: [Relation];
    effect: [Effect];
}

table Image {
  iriSpace: [IRIMeta](required);
  color: [Color](required);
  processor: [Processor](required);
  script: [Script](required);      
  metadata: Metadata (required);
  layer: [Layer](required);
  publishing: [Publishing](required);
}

root_type Image;