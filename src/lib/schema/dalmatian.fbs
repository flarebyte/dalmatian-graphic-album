struct Vec2d {
    x: uint32;
    y: uint32;
}

struct Vec2dFloat {
    x: float;
    y: float;
}

struct Vec3d {
    x: uint32;
    y: uint32;
    z: uint32;
}

struct Vec3dFloat {
    x: float;
    y: float;
    z: float;
}

struct ColorRGBA {
    r: uint16;
    g: uint16;
    b: uint16;
    a: uint16;
}

struct Fraction {
    numerator: uint32;
    denominator: uint32;
}

struct Vec2dFraction {
    x: Fraction;
    y: Fraction;
}

struct Dim2dFraction {
    width: Fraction;
    height: Fraction;
}

struct LocalizedTextId {
    localizedId: uint16;
}

/** RDF n-triples */

table Curie {
    prefix: string;
}

table IRI {
    curie: Curie;
    path: string (required);
}

table Localized {
    text: string (required);
    language: string (required);
}

table Text {
    value: string (required);
}

table AnyURI {
    value: string (required);
    mediaType: string;
}

table IsoDateTime {
    value: string (required);
}

table Bool {
    value: bool;
}

table Uint8 {
    value: [uint8];
}

table Uint16 {
    value: [uint16];
}

table Uint32 {
    value: [uint32];
}

union anyUint { Uint8, Uint16, Uint32 }

table Float {
    value: [float] (required);
}

table Vector2d {
    value: Vec2d (required);
}

table Vector3d {
    value: Vec3d (required);
}

table Vector2dFloat {
    value: Vec2dFloat (required);
}

table Vector3dFloat {
    value: Vec3dFloat (required);
}

table VectorColorRGBA {
    value: ColorRGBA (required) ;
}

table VectorFraction {
    value: Fraction (required) ;
}

union ObjectValue { IRI, Localized, Text, Bool, Uint8, Uint16, Uint32, Float, Vector2d, Vector3d, Vector2dFloat, Vector3dFloat, AnyURI, IsoDateTime, VectorColorRGBA, VectorFraction}

table Assertion {
    predicate: IRI (required);
    objectValue: ObjectValue (required);
}

table Metadata {
    id: uint32;
    assertion: [Assertion];
}

struct Point {
    x: uint32;
    y: uint32; 
    sid: ubyte;
}

struct MoveTo {
    x: uint32;
    y: uint32;
}

struct LineTo {
    x: uint32;
    y: uint32;
}

struct Horizontal {
    x: uint32;
}

struct Vertical {
    y: uint32;
}
/** Curve */

struct CubicCurve {
    x1: uint32;
    y1: uint32;
    x2: uint32;
    y2: uint32;
    x: uint32;
    y: uint32;
}

struct SmoothCubicCurve {
    x2: uint32;
    y2: uint32;
    x: uint32;
    y: uint32;
}

struct QuadraticCurve {
    x1: uint32;
    y1: uint32;
    x: uint32;
    y: uint32;
}

struct SmoothQuadraticCurve {
    x: uint32;
    y: uint32;
}

enum ArcFlag: ubyte {LargeArcA, SmallArcA, LargeArcB, SmallArcB}

struct EllipticalArc {
    rx: uint32;
    ry: uint32;
    rotate: float32;
    arcFlag: ArcFlag;
    x: uint32;
    y: uint32;
}

union Draw {MoveTo, LineTo, Horizontal, Vertical, CubicCurve, SmoothCubicCurve, QuadraticCurve, SmoothQuadraticCurve, EllipticalArc, Point}
/** Illustrations and Panels */

table Entity {
    metadata: Metadata;
}

table Style {
    metadata: Metadata;
}

table Illustration {
    metadata: Metadata;
    data: anyUint;
}

table Shape {
    metadata: Metadata;
    drawing: [Draw];
    entityId: uint16;
    illustrationId: uint16;
}

struct StencilId {
    panelId: uint16;
}

struct StyleId {
    styleId: uint16;
}

struct IllustrationId {
    illustrationId: uint16;
}

struct ShapeId {
    shapeId: uint16;
}

struct Blending {
    operator: uint8; //Source-destination  0b1111
}

struct FlipHorizontal {}

// swap 0 and 1
struct Invert {}

// Uses https://en.wikipedia.org/wiki/Polish_notation
union Compositing { ShapeId, IllustrationId , Vec2d, Blending , FlipHorizontal, Invert}

table Stencil {
    metadata: Metadata;
    compositing: [Compositing];
}/** Speech */

struct SpeakingCharacter {
    entityId: uint16;
}

struct ThinkingCharacter {
    entityId: uint16;
}

struct ListeningCharacter {
    entityId: uint16;
}

struct Narrator {
    entityId: uint16;
}

struct TextSelector {
    start: uint32;
    end: uint32;
}
struct Annotation {
     supplementId: uint16;
}

struct StrongText {}

struct EmphasizedText {}

struct DeletedText {}

struct SubscriptText {}
struct SuperscriptText {}
struct MarkedText {}

union Interlocutor { SpeakingCharacter, ThinkingCharacter, ListeningCharacter, Narrator, StyleId }

union Transcript { LocalizedTextId, StyleId, TextSelector, Annotation, StrongText, EmphasizedText, DeletedText, SubscriptText, SuperscriptText, MarkedText }

table Speech {
    metadata: Metadata;
    interlocutor: [Interlocutor];
    transcript: [Transcript];
}

struct SpeechId {
    speechId: uint16;
}
struct Section {
    supplementId: uint16;
}

struct Page {
    supplementId: uint16;
}

struct Tile {
    supplementId: uint16;
}

struct Panel { //Title vs panel
    supplementId: uint16; 
}

union TileInstruction { Section, Page, Tile, Panel, Vec2dFraction, Dim2dFraction, StencilId, StyleId , SpeechId}

table TileLayout {
    sequence: [TileInstruction];
}

union Layout { TileLayout }

/** Album */

table Publishing {
    metadata: Metadata;
    layout: Layout;
}

table Album {
  metadata: Metadata;
  supplement: [Metadata];
  entity: [Entity];
  speech: [Speech];
  localizedText: [Localized];
  illustration: [Illustration];
  shape: [Shape];
  style: [Style];
  stencil: [Stencil];
  publishing: [Publishing];
}

root_type Album;
namespace Dalmatian;

file_identifier "DALN";
file_extension "daln";

attribute "priority";
